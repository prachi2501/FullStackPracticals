Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

 

Example 1:

Input: s = "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()".
Example 2:

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".
Example 3:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 3 * 104
s[i] is '(', or ')'.

solution:
 



class Solution {
    public int longestValidParentheses(String s) {
        int res=0;
        int dp[]= new int[s.length()+1];

        for(int i=1;i<s.length();i++){
            int j=i-dp[i]-1;
                if( j>=0 && s.charAt(j)=='(' && s.charAt(i)==')')
                    dp[i+1]=dp[i]+dp[j]+2;
                   res= Math.max(res,dp[i+1]);
                }
                   return res;
        } 
    }s